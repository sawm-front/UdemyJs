"use strict";

// Function declaration - существует еще до того, как код запустится. Функция работает до того, как она была вызвана.


// Имя функции - глагол с припиской того, над чем выполняется действие

let num = 25;

function showFirstMessage(text, digit) {
   console.log(text, digit);
   let num = 67;
   console.log(num);
}

// Перменные, которые находятся в теле функции, существую только внутри функции

showFirstMessage("Hello World!", 69);
console.log(num);

// Замыкание функции: Когда внутри функции есть обращение к какой-либо переменной и функция ищет эту переменную внутри себя. Сначала ищет внутри себя, натыкается и использует свою перменную внутри тела функции. Если не найдет перменную, то идет поиск на уровень выше. Замыкание функции - это сама функция вместо со всеми внешними переменными, котоыре ей доступны.

// Возвращение при помощи return.  После return функция заканивается

function calc(a, b) {
   return a + b;
}

console.log(calc(68, 1));

function ret() {
   let asdf = 50;
   return asdf;
}

const anotherNum = ret();

console.log(anotherNum);



// Function expression - функциональное выражение, функция помещается внутрь переменной. Сощдается только тогда, когда до нее доходит поток кода.

const logger = function() {
   console.log("Hello!");
};

logger();

// Стрелочные функции: создаем переменную, туда помещаем функцию c переданными аргументами => указывает на выполнение определенного кода. Такая функция не имеет контекст вызова и чаще всего можно встретить в обработчиках событий


// Сокращенный вариант
const calculator = (a, b) => a + b;


// Классический вариант

const calculate = (a, b) => {
   return a + b;
};